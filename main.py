import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import aiohttp
from datetime import datetime
import xml.etree.ElementTree as ET
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
import sqlite3
import time

API_TOKEN = "7951894150:AAFOX6FvOpqnA6t9Od1NeTFyERYYLuaKPY0"

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# --- SQLite ---
conn = sqlite3.connect("subscribers.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS subscribers (chat_id INTEGER PRIMARY KEY)")
conn.commit()

# --- –ê–Ω—Ç–∏—Å–ø–∞–º ---
last_request = {}  # {user_id: {"cbr": timestamp, "nbk": timestamp, "other": timestamp}}
LIMIT_SECONDS = 15

def check_limit(user_id, key):
    now = time.time()
    if user_id in last_request and key in last_request[user_id]:
        if now - last_request[user_id][key] < LIMIT_SECONDS:
            return False
    if user_id not in last_request:
        last_request[user_id] = {}
    last_request[user_id][key] = now
    return True

# --- –ö–Ω–æ–ø–∫–∏ ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ö—É—Ä—Å –¶–ë –†–§"), KeyboardButton(text="üìä –ö—É—Ä—Å –ù–ë –†–ö")],
        [KeyboardButton(text="üåç –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã")],
        [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
    ],
    resize_keyboard=True
)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¶–ë –†–§ ---
async def get_cbr_rates():
    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            text = await resp.text()
            data = json.loads(text)
            return data["Valute"]

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –ù–ë –†–ö ---
async def get_nbk_rates():
    url = "https://nationalbank.kz/rss/get_rates.cfm?fdate=" + datetime.now().strftime("%d.%m.%Y")
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            text = await resp.text()
            root = ET.fromstring(text)
            rates = {}
            for item in root.findall("item"):
                title = item.find("title").text
                description = item.find("description").text
                rates[title] = float(description.replace(",", "."))
            return rates

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¶–ë –†–§ ---
def format_cbr(rates):
    usd = rates["USD"]["Value"]
    eur = rates["EUR"]["Value"]
    kzt = rates["KZT"]["Value"]
    rub = 1
    today = datetime.now(pytz.timezone("Asia/Almaty")).strftime("%d.%m.%Y")
    return (
        f"üìÖ –ö—É—Ä—Å –¶–ë –†–§ ({today})\n\n"
        f"üá∫üá∏ 1 USD | {usd:.2f} ‚ÇΩ\n"
        f"üá™üá∫ 1 EUR | {eur:.2f} ‚ÇΩ\n"
        f"üá∞üáø 100 KZT | {kzt*100:.2f} ‚ÇΩ\n"
        f"üá∑üá∫ 1 RUB | {rub} ‚ÇΩ"
    )

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–ë –†–ö ---
def format_nbk(rates):
    usd = rates["USD"]
    eur = rates["EUR"]
    rub = rates["RUB"]
    kzt = 1
    today = datetime.now(pytz.timezone("Asia/Almaty")).strftime("%d.%m.%Y")
    return (
        f"üìÖ –ö—É—Ä—Å –ù–ë –†–ö ({today})\n\n"
        f"üá∫üá∏ 1 USD | {usd:.2f} ‚Ç∏\n"
        f"üá™üá∫ 1 EUR | {eur:.2f} ‚Ç∏\n"
        f"üá∑üá∫ 1 RUB | {rub:.2f} ‚Ç∏\n"
        f"üá∞üáø 1 KZT | {kzt} ‚Ç∏"
    )

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –ø–æ –ù–ë –†–ö ---
def format_other_nbk(rates):
    today = datetime.now(pytz.timezone("Asia/Almaty")).strftime("%d.%m.%Y")
    other = {
        "üáßüáæ": "BYN",
        "üá∫üá¶": "UAH",
        "üá∫üáø": "UZS",
        "üá∞üá¨": "KGS",
        "üáπüá≠": "THB",
        "üáπüá∑": "TRY",
    }
    text = f"üìÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã ({today})\n<i>(–¥–∞–Ω–Ω—ã–µ –ù–ë –†–ö)</i>\n\n"
    for flag, code in other.items():
        if code in rates:
            value = rates[code]
            text += f"{flag} 1 {code} | {value:.2f} ‚Ç∏\n"
    return text

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message(F.text == "üìä –ö—É—Ä—Å –¶–ë –†–§")
async def show_cbr(message: Message):
    if not check_limit(message.chat.id, "cbr"):
        return await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    rates = await get_cbr_rates()
    await message.answer(format_cbr(rates))

@dp.message(F.text == "üìä –ö—É—Ä—Å –ù–ë –†–ö")
async def show_nbk(message: Message):
    if not check_limit(message.chat.id, "nbk"):
        return await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    rates = await get_nbk_rates()
    await message.answer(format_nbk(rates))

@dp.message(F.text == "üåç –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã")
async def show_other(message: Message):
    if not check_limit(message.chat.id, "other"):
        return await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    rates = await get_nbk_rates()
    await message.answer(format_other_nbk(rates))

@dp.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def subscription_menu(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")]
        ]
    )
    await message.answer(
        "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ç–∞–Ω—ã.\n–ò—Å—Ç–æ—á–Ω–∏–∫: –ù–ë –†–ö.",
        reply_markup=kb
    )

@dp.callback_query(F.data == "subscribe")
async def subscribe(call):
    await call.answer()  # üîπ —Ñ–∏–∫—Å –º–∏–≥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    cursor.execute("SELECT 1 FROM subscribers WHERE chat_id=?", (call.message.chat.id,))
    if cursor.fetchone():
        await call.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    else:
        cursor.execute("INSERT INTO subscribers (chat_id) VALUES (?)", (call.message.chat.id,))
        conn.commit()
        await call.message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@dp.callback_query(F.data == "unsubscribe")
async def unsubscribe(call):
    await call.answer()  # üîπ —Ñ–∏–∫—Å –º–∏–≥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    cursor.execute("SELECT 1 FROM subscribers WHERE chat_id=?", (call.message.chat.id,))
    if cursor.fetchone():
        cursor.execute("DELETE FROM subscribers WHERE chat_id=?", (call.message.chat.id,))
        conn.commit()
        await call.message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await call.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
async def send_daily_rates():
    cursor.execute("SELECT chat_id FROM subscribers")
    subs = cursor.fetchall()
    if not subs:
        return
    rates = await get_nbk_rates()
    text = format_nbk(rates)
    for (chat_id,) in subs:
        try:
            await bot.send_message(chat_id, "üì¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n" + text)
            await asyncio.sleep(0.05)  # –∞–Ω—Ç–∏—Ñ–ª—É–¥
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    scheduler = AsyncIOScheduler(timezone=pytz.timezone("Asia/Almaty"))
    scheduler.add_job(send_daily_rates, CronTrigger(hour=9, minute=30))
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
